@using CarRental.ViewModels;

@model PaginatedCarsViewModel

@{
    ViewData["Title"] = "Car Listing";
}

<div class="container-fluid div-index">
    <h2 class="my-2">Find A Car</h2>

    <div class="my-3 mb-5">
        <form methd="get" asp-action="Index" class="row">
            <div class="hstack gap-3">
                <label for="make" class="visually-hidden">Make</label>
                <input type="text" name="make" id="make" class="form-control" placeholder="Make" value="@Context.Request.Query["make"]" />

                <label for="model" class="visually-hidden">Model</label>
                <input type="text" name="model" id="model" class="form-control" placeholder="Model" value="@Context.Request.Query["model"]" />

                <label for="miPrice" class="visually-hidden">Minimal Price</label>
                <input type="number" name="minPrice" id="minPrice" step="0.01" class="form-control" placeholder="Minimal Price" value="@Context.Request.Query["minPrice"]" />

                <label for="maxPrice" class="visually-hidden">Maximal Price</label>
                <input type="number" name="maxPrice" id="maxPrice" step="0.01" class="form-control" placeholder="Maximal Price" value="@Context.Request.Query["maxPrice"]" />

                <button type="submit" class="btn btn-secondary">Search</button>
                <div class="vr"></div>
                <button type="reset" class="btn btn-outline-secondary">Reset</button>
            </div>

            <h1 class="my-2">Available Cars</h1>


            <div class="row">
                @foreach (var car in Model.Cars)
                {
                    <div class="col-xxl-3 col-lg-4 col-md-6 col-sm-12">
                        @await Html.PartialAsync("_CarCard", car)
                    </div>
                }
            </div>

            <div class="my-3">
                <hr />
            </div>

            <nav class="outline-secondary d-inline-flex justify-content-center">
                <ul class="pagination">
                    <li class="page-item">
                        @if (Model.HasPreviousPage)
                        {
                            <a class="page-link text-secondary" href="@Url.Action("Index", "Car", new {page = Model.PageIndex})" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        }
                    </li>

                    <li class="page-item">
                        <input type="hidden" name="pageSize" id="pageSize" value="@Context.Request.Query["pageSize"]" />

                        @if (Model.HasPreviousPage)
                        {
                            <a class="page-link text-secondary" href="@Url.Action("Index", "Car", new {page = (Model.CurrentPage - 1).ToString()})">Previous</a>
                        }
                    </li>

                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        @if (Model.CurrentPage == i)
                        {
                            <li class="page-item active" aria-current="page">
                                <a class="page-link bg-secondary text-white active-border" href="#">@i</a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link text-secondary" href="@Url.Action("Index", "Car", new {page = i})">@i</a>
                            </li>
                        }
                    } 
                    
                    <li class="page-item">
                        <input type="hidden" name="pageCount" id="pageCount" value="@Context.Request.Query["pageCount"]" />

                        @if(Model.HasNextPage)
                        {
                            <a class="page-link text-secondary" href="@Url.Action("Index", "Car" , new {page = (Model.CurrentPage + 1).ToString()})">Next</a>
                        }
                    </li>

                    <li class="page-item">
                        @if (Model.HasNextPage)
                        {
                            <a class="page-link text-secondary" href="@Url.Action("Index", "Car", new {page = Model.TotalPages})" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                        }
                    </li>
                </ul>
            </nav>
        </form>
     </div>
</div>